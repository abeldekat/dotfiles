#!/bin/bash

# TEMPUS --- Themes Every Meticulous Person Ultimately Seeks (yes, this
# is a backronym).
#
# Handles the integration between my custom desktop session[0] and my
# Tempus themes[1].  TEMPUS performs live theme switching, while also
# updating the relevant configuration files.  The main use case for this
# is as part of BSPWM, but some actions will also work in GNOME or MATE
# (the latter being my fallback DE on Debian).
#
# 0: https://gitlab.com/protesilaos/dotfiles
# 1: https://gitlab.com/protesilaos/tempus-themes (partially
#    incorporated in my dotfiles)
#
# Copyright (c) 2019-2020 Protesilaos Stavrou <info@protesilaos.com>
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.


# Error handling and help messages
# --------------------------------
_help_message() {
	echo "Run this script with a single argument:"

	# The parameter expansions here keep only the theme's unique name:
	# /path/to/tempus_classic.sh ==> classic
	while IFS= read -r -d $'\0' line; do
		line="${line##[a-z/_]*tempus_}"
		printf "\\t%s\\n" "${line%.sh}"
	done < <(find "$HOME"/.local/share/my_colors/shell/ -type f -name '*.sh' -print0 | sort -z)

	echo "This assumes you have used STOW on my 'colours' directory (part of my dotfiles)"
}

[ "$#" -eq 1 ] || { _help_message; exit 1; }

tempus_theme="$1"
vim_theme="tempus_${tempus_theme}"

# Is the theme light or dark?
#
# TODO 2019-11-17: Themes should expose information about their variant.
# This approach is fragile.  Changes must be implements in the generator:
# https://gitlab.com/protesilaos/tempus-themes-generator
case "$tempus_theme" in
	dawn|day|fugit|past|totus)
		theme_variant=light
		;;
	autumn|classic|dusk|future|night|rift|spring|summer|tempest|warp|winter)
		theme_variant=dark
		;;
	fromwall|frombrodie)
		theme_variant=dark
		vim_theme="tempus_autumn"
		;;
	*)
		echo "_$1_ is not a valid Tempus theme."
		_help_message
		;;
esac

# Program-specific functions
# --------------------------

# Shorter version of the sed command we will be using throughout…
_sed() {
	sed --follow-symlinks -i "$@" &
}

_sed_sync() {
	# Here we make an exception for the _sed function, because if we run
	# this asynchronously, other processes might fail to get the new
	# colours.  To my knowledge as of 2019-06-27, this appears to be
	# better than using sleep and/or until…
	sed --follow-symlinks -i "$@"
}

# Check for dependency, else exit the given function that calls this.
_depcheck() {
	command -v "$1" > /dev/null || { echo "Missing dependency: $1."; return 1; }
}

_wallpaper() {
	# the wallpapers are defined manually at
	# ~/Pictures/theme/{light,dark}.jpg
	wall_path="$HOME/Wallpapers/theme"
	wall_jpg="$wall_path/dark.jpg"
	case "$theme_variant" in
		l*) 
			wall_jpg="$wall_path/light.jpg"
			;;
	esac
	[ -d "$wall_path" ] || { echo "No path to: $wall_path"; return 1; }
	[ -f "$wall_jpg" ] || { echo "No path to: $wall_jpg"; return 1; }

	setbg "$wall_jpg"
}

_vim() {
	_depcheck vim
	_sed "s,\(colorscheme \).*,\1${vim_theme}," "$HOME"/.vim/vimrc
}

_tmux() {
	_depcheck tmux

	_sed_sync "s/tempus_fg=\"#[a-zA-Z0-9]*\"/tempus_fg=\"${foreground}\"/ ; \
	s/tempus_bg=\"#[a-zA-Z0-9]*\"/tempus_bg=\"${background}\"/ ; \
	s/tempus_fg_alt=\"#[a-zA-Z0-9]*\"/tempus_fg_alt=\"${foregroundalt}\"/ ; \
	s/tempus_bg_alt=\"#[a-zA-Z0-9]*\"/tempus_bg_alt=\"${backgroundalt}\"/ ; \
	s/tempus_bg_dim=\"#[a-zA-Z0-9]*\"/tempus_bg_dim=\"${backgrounddim}\"/" "$HOME"/.config/tmux/tmux.conf

	pgrep tmux > /dev/null || return 1

	tmux source-file "$HOME/.config/tmux/tmux.conf"

	# NOTE this is another script that is part of my dotfiles.
	tmux_update_vim &
}

_x_and_shell() {
	tempus_files="$HOME/.local/share/my_colors"
	tempus_active_x="$tempus_files/active-tempus-theme.Xcolors"
	tempus_active_sh="$tempus_files/active-tempus-theme.sh"
	tempus_active_content="$tempus_files/active-theme-content"

	_check_tempus() {
		[ -n "$1" ] || { echo "Path for Tempus themes is unavailable."; return 1; }
	}

	_check_tempus "$tempus_files"
	_check_tempus "$tempus_active_x"
	_check_tempus "$tempus_active_sh"

	# IMPORTANT once modified, let other processes use the new colours.
	_sed_sync "s,\(^source.*tempus_\).*,\1${tempus_theme}.sh," "$tempus_active_sh" && source "$tempus_active_sh"

	# Update the X colours, so that new X programs inherit them.
	_sed "s,\(^#include.*tempus_\).*,\1${tempus_theme}.Xcolors\"," "$tempus_active_x"

	# Create a new file as well that is used to get the colour values
	# of the running terminal.
	#
	# This is used by: repaint_terminals
	grep '^.*=' "$tempus_files/shell/tempus_${tempus_theme}.sh" > "$tempus_active_content"

	# Another one of my scripts for live recolouring running terminal
	# emulators, by using escape sequences.
	repaint_terminals &

	xresources="$HOME"/.Xresources
	if [ -f "$xresources" ]; then
		xrdb -I "$HOME" -merge "$xresources"
	fi
}

_bspwm() {
	_depcheck bspwm
	pgrep -x bspwm || return 1

	_active_border_color="$color3"	
	_focused_border_color="$color6"	
	if [ "$theme_variant" = 'light' ]; then
		_active_border_color="$color1"	
		_focused_border_color="$color4"	
	fi
	_backgroundalt="${backgroundalt:-$color8}"
	_backgrounddim="${backgrounddim:-$color8}"
	bspc config active_border_color "$_active_border_color"
	bspc config focused_border_color "$_focused_border_color"
	bspc config normal_border_color "$_backgroundalt"
	bspc config presel_feedback_color "$_backgrounddim"

	bspwmrc="$HOME/.config/bspwm/bspwmrc"
	[ -x "$bspwmrc" ] || { echo "Missing bspwmrc."; return 1; }

	_sed "/^[^#].*active_border_color/ s,#[a-zA-Z0-9]*,$_active_border_color, ; \
		/^[^#].*focused_border_color/ s,#[a-zA-Z0-9]*,$_focused_border_color, ; \
		/^[^#].*normal_border_color/ s,#[a-zA-Z0-9]*,$_backgroundalt, ; \
		/^[^#].*presel_feedback_color/ s,#[a-zA-Z0-9]*,$_backgrounddim," "$bspwmrc"
}

_polybar(){
	pgrep -x polybar || return 1
	_depcheck launchpolybar
	launchpolybar &
}

# Function call cascade
# ---------------------
_x_and_shell
_tmux
_vim
_bspwm
_wallpaper
_polybar
